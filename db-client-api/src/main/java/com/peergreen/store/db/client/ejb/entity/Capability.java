package com.peergreen.store.db.client.ejb.entity;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;

import com.peergreen.store.db.client.ejb.key.primary.CapabilityId;


/**
 * Entity Bean representing in the database the capability of a petal.
 */
@NamedQueries({
    @NamedQuery (
            name = "Capability.findAll",
            query = "select cap from Capability cap"
            ),
            @NamedQuery (
                    name = "CapabilityByName",
                    query = "select cap from Capability cap where "
                            + "cap.capabilityName = :name "
                            + "and cap.version = :version "
                            + "and cap.namespace = :namespace"
                    ),
                    @NamedQuery (
                            name = "Requirement.findCapabilities",
                            query = "SELECT cap FROM Capability cap"
                                    + " WHERE cap.namespace = :namespace"
                            )
})
@Entity
@IdClass(CapabilityId.class)
public class Capability {

    private Integer hashCode = null;

    /**
     * Name of the capability. Belongs to the composite primary key.
     */
    @Id
    @Column(name = "name")
    private String capabilityName;

    /**
     * Generated id of the capability. Belongs to the composite primary key.
     */
    @Id
    @SequenceGenerator(name = "idCapabilitySeq",
    initialValue = 1, allocationSize = 50)
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
    generator = "idCapabilitySeq")
    @Column(name = "id")
    private int capabilityId;

    /**
     * Version of the capability. Belongs to the composite primary key.
     */
    @Id
    private String version;

    /**
     * Namespace of the capability. Belongs to the composite primary key.
     */
    @Id
    private String namespace;

    /**
     * Set of properties of the capability.
     * Each capability have at least one property.
     */
    @OneToMany(mappedBy = "capability", cascade = {CascadeType.ALL })
    @Column(name = "properties", nullable = false)
    private Set<Property> properties = new HashSet<>();

    /**
     * Set of the petals which provide the capability.
     */
    @ManyToMany(mappedBy = "capabilities")
    @Column(name = "petals", nullable = false)
    private Set<Petal> petals = new HashSet<>();

    /**
     * Constructs a new capability with <code>null</code> 
     * for all its attributes.
     */
    public Capability() {

    }

    /**
     * Constructs a new capability with the specified attributes. The id is
     * generated by entityManager when persist, and petals are empty.
     *
     * @param name name of the capability to create
     * @param version version of the capability to create
     * @param namespace namespace of the capability to create
     * @param properties properties of the capability to create
     */
    public Capability(String name, String version, String namespace,
            Set<Property> properties) {
        super();
        this.capabilityName = name;
        this.version = version;
        this.namespace = namespace;
        this.properties = properties;
        Set<Petal> petalSet = new HashSet<Petal>();
        setPetals(petalSet);
    }


    /**
     * Method to get the name of the capability instance.
     *
     * @return the name of the capability
     */
    public String getCapabilityName() {
        return this.capabilityName;
    }

    /**
     * Method to get Id of a capability.
     * @return the capability's id
     */
    public int getCapabilityId() {
        return capabilityId;
    }

    /**
     * Method to retrieve a capability version.
     * @return The version of this instance of capability
     */
    public String getVersion() {
        return version;
    }

    /**
     * Method to get the namespace of the capability instance.
     *
     * @return the namespace of the capability
     */
    public String getNamespace() {
        return namespace;
    }


    /**
     * Method for retrieve the properties of the capability instance.
     *
     * @return Set containing all the properties of the capability
     */
    public Set<Property> getProperties() {
        return properties;
    }

    /**
     * Method for set the properties of the capability instance.
     *
     * @param properties the properties to set
     */
    public void setProperties(Set<Property> properties) {
        this.properties = properties;
    }

    /**
     * Method to retrieve the petals which provides this capability instance.
     *
     * @return Set containing petals
     */
    public Set<Petal> getPetals() {
        return petals;
    }

    /**
     * Method for add others petals to the Set of petals which provides
     * this capability instance.
     *
     * @param petals Set containing petals to set
     */
    public void setPetals(Set<Petal> petals) {
        this.petals = petals;
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Capability)) {
            return false;
        }

        Capability cap = (Capability) obj;

        return ((cap.getCapabilityId() == this.capabilityId)
                && (cap.capabilityName.equals(this.capabilityName))
                && (cap.version.equals(this.version)));
    }

    @Override
    public int hashCode() {
        if (hashCode == null) {
            hashCode = ("" + capabilityId + capabilityName +
                    version + namespace).hashCode();
        }

        return hashCode;
    }

    /**
     * Returns a string representation of the object.
     *
     * @return a string representation of the object
     */
    @Override
    public String toString() {
        String s = capabilityId + "-" + capabilityName + ":"
                + version + ":" + namespace;
        return s;
    }

}
